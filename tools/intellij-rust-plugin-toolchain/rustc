#!/usr/bin/env sh
# This file is part of r-parser. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/r-parser/master/COPYRIGHT. No part of r-parser, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2021 The developers of r-parser. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/r-parser/master/COPYRIGHT.


set -e
set -u
set -f

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

set_requires_target()
{
	local results_vary_by_target=false
	local can_set_target=true
	local can_set_target_cpu=true
	while [ $# -ne 0 ];
	do
		case "$1" in
			
			'--print')
				if [ $# -gt 1 ]; then
				
					case "$2" in
					
						'cfg'|'target-cpus'|'target-features')
							results_vary_by_target=true
						;;
					
						*)
							:
						;;
					
					esac
					shift 1
				fi
			;;
			
			'--target')
				can_set_target=false
			;;
			
			'-C')
				if [ $# -gt 1 ]; then
				
					case "$2" in
					
						target-cpu=*)
							results_vary_by_target=true
						;;
					
						*)
							:
						;;
						
					esac
					shift 1
				fi
			;;
		
			*)
				:
			;;
			
		esac
		
		shift 1
	done
	
	if $results_vary_by_target; then
		if $can_set_target; then
			requires_target=true
		fi
		if $can_set_target_cpu; then
			requires_target_cpu=true
		fi
	fi
}

main()
{
	local requires_target=false
	local requires_target_cpu=false
	set_requires_target "$@"
	
	if $requires_target; then
		set -- "$@" --target x86_64-unknown-linux-musl
	fi
	if $requires_target_cpu; then
		set -- "$@" -C target-cpu='tigerlake'
	fi
	
	exec ~/.cargo/bin/rustc "$@"
}

main "$@"
